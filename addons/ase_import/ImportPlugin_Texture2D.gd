@tool
extends EditorImportPlugin


const AsepriteKit = preload("AsepriteKit.gd")
const AsepriteCommand = preload("AsepriteCommand.gd")


func _get_importer_name() -> String:
	return "aseprite_animation_importer.Texture2D.plugin"

func _get_visible_name() -> String:
	return "Aseprite: Texture2D"

func _get_recognized_extensions() -> PackedStringArray:
	return ["aseprite", "ase"]

func _get_save_extension() -> String:
	return "tres"

func _get_resource_type() -> String:
	return "Texture2D"

func _get_priority() -> float:
	return 1.0

func _get_import_order() -> int:
	return IMPORT_ORDER_DEFAULT + 10

func _get_preset_count() -> int:
	return AsepriteKit._get_preset_count()

func _get_preset_name(preset_index: int) -> String:
	return AsepriteKit._get_preset_name(preset_index)

func _get_import_options(path: String, preset_index: int) -> Array:
	return AsepriteKit._get_import_options(preset_index)

func _get_option_visibility(path: String, option_name: StringName, options: Dictionary) -> bool:
	return AsepriteKit._get_option_visibility(path, option_name, options)


func _import(
	source_file: String,
	save_path: String,
	options: Dictionary,
	r_platform_variants: Array[String],
	r_gen_files: Array[String]
) -> int:

	var aseprite: AsepriteCommand = AsepriteCommand.new()
	var export_results: Array[Dictionary] = []
	var err: int = aseprite.export(source_file, save_path, options, r_platform_variants, r_gen_files, export_results)
	if err == ERR_UNCONFIGURED:
		AsepriteKit.print_invalid_aseprite_command()
		print("Aseprite import: aborted due to invalid aseprite command: %s" %  source_file)
	elif err != OK:
		return err
	elif export_results.is_empty():
		printerr("Aseprite import: failed due to empty export results: %s" % source_file)
		return ERR_INVALID_DATA

	if err != ERR_UNCONFIGURED:
		# Notify the editor of resources generated by AsepriteCommand.export()
		for export_info in export_results:
			if FileAccess.file_exists(export_info.sprite_sheet):
				append_import_external_resource(export_info.sprite_sheet)

	# Save a placeholder resource so the editor doesn't complain
	var resource_path: String = "%s.%s" % [save_path, _get_save_extension()]
	var placeholder: PlaceholderTexture2D = PlaceholderTexture2D.new()
	if ResourceLoader.exists(resource_path):
		placeholder.take_over_path(resource_path)
	err = ResourceSaver.save(placeholder, resource_path)

	return err
